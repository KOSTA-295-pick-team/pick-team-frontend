# 알 수 없는 도메인 차단용 서버 블록
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    
    # 알 수 없는 도메인으로의 접근을 차단
    return 444;
}

server {
    listen       80;
    listen  [::]:80;
    server_name  www.pickteam.site pickteam.site localhost;

    root   /usr/share/nginx/html;
    index  index.html;

    access_log  /var/log/nginx/access.log;
    error_log   /var/log/nginx/error.log warn;
    

    # 파일 업로드 API 경로 (더 큰 크기 허용)
    location ~ ^/api/workspaces/[0-9]+/icon$ {
        client_max_body_size 10M;  # 워크스페이스 아이콘용
        
        proxy_pass http://kosta-pick-team-backend:8081;
        proxy_set_header Host www.pickteam.site;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # CORS 설정
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With";
        
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain charset=UTF-8';
            add_header Content-Length 0;
            return 204;
        }
    }

    # 채팅 파일 업로드 API 경로 (더 큰 크기 허용)
    location ~ ^/api/workspaces/[0-9]+/chat-rooms/[0-9]+/messages/upload$ {
        client_max_body_size 50M;  # 채팅 파일용 (문서, 이미지 등)
        
        proxy_pass http://kosta-pick-team-backend:8081;
        proxy_set_header Host www.pickteam.site;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_connect_timeout 120s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        
        # CORS 설정
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With";
        
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain charset=UTF-8';
            add_header Content-Length 0;
            return 204;
        }
    }

    # SSE (Server-Sent Events) 전용 설정 🔥 - API보다 먼저 배치
    location /api/sse/ {
        # SSE 전용 로깅 (실제 파일에 기록)
        access_log /tmp/sse_access.log;
        error_log /tmp/sse_error.log debug;
        
        # 백엔드로 프록시
        proxy_pass http://kosta-pick-team-backend:8081;
        
        # SSE 핵심 헤더 설정 (순서 중요)
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        
        # HTTP/1.1 및 연결 유지 설정
        proxy_http_version 1.1;
        proxy_set_header Connection '';
        proxy_set_header Upgrade $http_upgrade;
        
        # SSE 필수 Accept 헤더 (백엔드가 올바른 Content-Type 반환하도록)
        proxy_set_header Accept 'text/event-stream, application/json, */*';
        
        # 캐시 완전 비활성화
        proxy_set_header Cache-Control 'no-cache, no-store, must-revalidate';
        proxy_set_header Pragma 'no-cache';
        proxy_set_header Expires '0';
        
        # 버퍼링 완전 비활성화 (SSE 실시간 전송 필수)
        proxy_buffering off;
        proxy_cache off;
        proxy_request_buffering off;
        proxy_max_temp_file_size 0;
        
        # nginx 자체 버퍼 크기 최소화
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # 타임아웃 설정 (SSE 장기 연결용)
        proxy_connect_timeout 60s;      # 연결 타임아웃 증가
        proxy_send_timeout 3600s;       # 전송 타임아웃 (1시간)
        proxy_read_timeout 3600s;       # 읽기 타임아웃 (1시간)
        
        # 연결 재시도 설정
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_timeout 0;
        proxy_next_upstream_tries 1;
        
        # 청크 인코딩 활성화
        chunked_transfer_encoding on;
        
        # Keep-alive 연결 설정
        proxy_socket_keepalive on;
        
        # CORS 설정 (SSE 연결 허용)
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, Last-Event-ID, X-Requested-With" always;
        add_header Access-Control-Expose-Headers "Content-Type, Cache-Control, Connection" always;
        
        # SSE 응답 헤더 처리 (백엔드가 설정한 헤더 유지)
        # Content-Type과 Cache-Control은 백엔드에서 설정하도록 함
        
        # Preflight OPTIONS 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, Last-Event-ID, X-Requested-With" always;
            add_header Access-Control-Max-Age 1728000 always;
            add_header Content-Type 'text/plain; charset=utf-8' always;
            add_header Content-Length 0 always;
            return 204;
        }
    }

    # API 요청을 백엔드로 프록시
    location /api/ {
        # 일반 API 요청은 작은 크기 제한 (JSON 등)
        client_max_body_size 1M;
        
        # 디버깅을 위한 로깅 추가 (실제 파일에 기록)
        access_log /tmp/api_access.log;
        error_log /tmp/api_error.log debug;
        
        # 백엔드로 프록시 (수정된 서비스 이름 사용)
        proxy_pass http://kosta-pick-team-backend:8081;
        
        # Host 헤더를 명시적으로 설정
        proxy_set_header Host www.pickteam.site;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 연결 실패 시 커스텀 에러 페이지
        proxy_intercept_errors on;
        error_page 502 503 504 = @backend_fallback;
        
        # CORS 설정
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With";
        
        # Preflight 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, DNT, If-Modified-Since, Keep-Alive, Origin, User-Agent, X-Requested-With";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain charset=UTF-8';
            add_header Content-Length 0;
            return 204;
        }
    }
    
    # 백엔드 연결 실패 시 대체 처리
    location @backend_fallback {
        add_header Content-Type application/json;
        return 502 '{"error": "Backend service unavailable", "message": "Spring Boot service is not responding"}';
    }

    # React 앱의 정적 파일 서빙
    location / {
        try_files $uri /index.html;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
